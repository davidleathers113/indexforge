[tool.poetry]
name = "indexforge"
version = "0.1.0"
description = "Universal file indexing and processing system"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://indexforge.app"
repository = "https://github.com/yourusername/indexforge"
documentation = "https://indexforge.app/docs"
keywords = ["index", "search", "files", "documents", "processing", "ml", "nlp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Text Processing :: Linguistic",
    "Framework :: FastAPI",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Typing :: Typed",
    "Framework :: Pytest",
    "Natural Language :: English",
    "Environment :: Web Environment",
    "Intended Audience :: Science/Research"
]
packages = [
    { include = "src", from = "." }
]

[tool.poetry.dependencies]
python = ">=3.11.7,<3.13"
fastapi = "^0.115.6"
uvicorn = {version = "^0.34.0", extras = ["standard"]}
python-multipart = "^0.0.20"
pydantic = "^2.10.5"
pydantic-settings = "^2.7.1"
python-dotenv = "^1.0.1"
requests = {version = "^2.32.3", extras = ["security"]}
sentry-sdk = {version = "^2.19.2", extras = ["fastapi"]}
tenacity = "^9.0.0"
weaviate-client = "^4.10.2"
supabase = "^2.11.0"
httpx = {version = ">=0.26,<0.28", extras = ["http2"]}
slowapi = "^0.1.9"

# Message Queue dependencies
aio-pika = "^9.4.0"
aiormq = "^6.8.1"

# Core processing dependencies
aiohttp = "^3.11.11"
asyncio = ">=3.4.3,<4.0.0"
structlog = ">=24.4.0,<25.0.0"
spacy = "^3.7.4"
nltk = "^3.8.1"

# Storage dependencies
redis = {version = "^5.2.1", extras = ["hiredis"]}
minio = "^7.2.14"
sqlalchemy = {version = "^2.0.36", extras = ["asyncio"], allow-prereleases = false}
greenlet = "^3.1.1"
alembic = "^1.14.0"
asyncpg = "^0.30.0"

# Monitoring dependencies
prometheus-client = "^0.21.1"
opentelemetry-api = "^1.29.0"
opentelemetry-sdk = "^1.29.0"
opentelemetry-instrumentation-fastapi = "^0.50b0"
statsd = "^4.0.1"

# Parsing dependencies
python-docx = "^1.1.2"
beautifulsoup4 = {version = "^4.12.3", extras = ["lxml"]}
html5lib = "^1.1"
jinja2 = "^3.1.5"
openpyxl = "^3.1.5"
"pdfminer.six" = "^20240706"
python-magic = "^0.4.27"
huggingface-hub = "^0.27.1"
accelerate = "^1.2.1"
transformers = "^4.48.0"

# Statistical analysis dependencies
scipy = "^1.12.0"
statsmodels = "^0.14.1"
scikit-learn = "^1.4.1"

# Additional dependencies
hvac = "^1.2.1"
loguru = "^0.7.2"
pillow = "^11.1.0"
dependency-injector = "^4.45.0"
backoff = "^2.2.1"
poetry = "^2.0.1"
pyjwt = "^2.10.1"

[tool.poetry.group.storage]
optional = true

[tool.poetry.group.storage.dependencies]
redis = {version = "^5.2.1", extras = ["hiredis"]}
minio = "^7.2.14"
sqlalchemy = {version = "^2.0.36", extras = ["asyncio"]}
alembic = "^1.14.0"
asyncpg = "^0.30.0"

[tool.poetry.group.monitoring]
optional = true

[tool.poetry.group.monitoring.dependencies]
prometheus-client = "^0.21.1"
opentelemetry-api = "^1.29.0"
opentelemetry-sdk = "^1.29.0"
opentelemetry-instrumentation-fastapi = "^0.50b0"
statsd = "^4.0.1"

[tool.poetry.group.ml]
optional = true

[tool.poetry.group.ml.dependencies]
numpy = {version = "^2.2.1", allow-prereleases = false}
scikit-learn = "^1.6.0"
sentence-transformers = "^2.5.1"
nltk = "^3.8.1"
tiktoken = "^0.8.0"
tqdm = "^4.67.1"
spacy = "^3.8.3"
faiss-cpu = "^1.7.4"
langdetect = "^1.0.9"

[tool.poetry.group.docker]
optional = true

[tool.poetry.group.docker.dependencies]
pytest-asyncio = "^0.23.5"
aiohttp = "^3.11.11"
psutil = "^5.9.6"
types-psutil = "^5.9.5.17"

[tool.poetry.group.render]
optional = true

[tool.poetry.group.render.dependencies]
pyyaml = "^6.0.2"
jsonschema = "^4.23.0"
python-dotenv = "^1.0.1"
requests = {version = "^2.32.3", extras = ["security"]}
pytest-timeout = "^2.3.1"
pytest-rerunfailures = "^15.0"
opentelemetry-api = "^1.29.0"
opentelemetry-sdk = "^1.29.0"
opentelemetry-instrumentation-fastapi = "^0.50b0"

[tool.poetry.group.parsing]
optional = true

[tool.poetry.group.parsing.dependencies]
beautifulsoup4 = {version = "^4.12.3", extras = ["lxml"]}
html5lib = "^1.1"
jinja2 = "^3.1.5"
openpyxl = "^3.1.5"
"pdfminer.six" = "^20240706"
python-magic = "^0.4.27"
pandas = {version = "^2.2.3", extras = ["computation"]}

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.4.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
mkdocs-swagger-ui-tag = "^0.6.7"
mkdocs-jupyter = "^0.24.6"
mkdocs-git-revision-date-plugin = "^0.3.2"
mkdocs-minify-plugin = "^0.7.1"

[tool.poetry.group.ci]
optional = true

[tool.poetry.group.ci.dependencies]
tox = "^4.12.1"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.5"
pytest-benchmark = {version = "^4.0.0", extras = ["histogram"]}
pytest-timeout = "^2.2.0"
pytest-xdist = {version = "^3.5.0", extras = ["psutil"]}
pytest-sugar = "^1.0.0"
pytest-clarity = "^1.0.1"
pytest-randomly = "^3.15.0"
pytest-datadir = "^1.5.0"
httpx = {version = ">=0.26,<0.28", extras = ["http2"]}
docker = "^7.0.0"
locust = "^2.21.0"
kubernetes = "^29.0.0"
pytest-kubernetes = ">=0.3.0,<1.0.0"

[tool.poetry.group.dev.dependencies]
# Linting and formatting
black = {version = "^24.10.0", extras = ["jupyter", "d"]}
ruff = "^0.9.1"
mypy = {version = "^1.14.1", extras = ["reports"]}
djlint = "^1.36.4"
pylint = "^3.3.3"

# Testing
pytest = {version = "^8.3.4", extras = ["testing"]}
pytest-asyncio = "^0.23.5"
hypothesis = {version = "^6.123.9", extras = ["numpy", "pandas", "dateutil"]}
faker = {version = "^33.3.0", extras = ["all"]}
coverage = {extras = ["toml"], version = "^7.6.10"}
decoy = "^2.1.1"

# Development tools
pre-commit = "^4.0.1"
commitizen = "^4.1.0"
python-dateutil = "^2.9.0.post0"
memory-profiler = "^0.61.0"
ipython = "^8.31.0"
ipdb = "^0.13.13"
rich = {version = "^13.9.4", extras = ["jupyter"]}

# API development
openai = {version = "^1.59.5", extras = ["datalib"]}
httpie = {version = "^3.2.4", extras = ["all"]}
pytest-xdist = "^3.6.1"
pydeps = "^3.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
api = "src.api.main:app"
cli = "src.cli.main:main"
benchmark = "src.benchmark.main:main"
docs = "src.docs.build:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = """
    -v
    --tb=short
    --import-mode=importlib
"""
pythonpath = ["src"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::RuntimeWarning",
]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload"
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
    "src/*/migrations/*",
    "src/*/tests/*",
    "src/*/conftest.py",
    "src/*/examples/*",
    "src/*/scripts/*"
]
fail_under = 85

[tool.coverage.html]
directory = "coverage_html"
show_contexts = true
skip_covered = false
skip_empty = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"

[tool.pylint.main]
jobs = 0
ignore-patterns = ["test_.*?py", "conftest.py"]
recursive = true
suggestion-mode = true
unsafe-load-any-extension = false

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "C0111",
    "C0103",
    "C0330",
    "C0326",
    "W0511",
    "R0903",
    "R0913",
    "R0914",
]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
priority = "supplemental"

[tool.ruff]
# Base configuration
line-length = 100
target-version = "py311"
src = ["src"]
preview = true

# File selection
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
]
extend-exclude = [".git", ".tox", ".venv", "venv", "__pycache__", "build", "dist"]

[tool.ruff.lint]
# Rule selection
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "RUF",  # ruff-specific rules
    "N",    # pep8-naming
    "D",    # pydocstyle
    "TCH",  # type-checking
    "ERA",  # eradicate
    "PL",   # pylint
    "TRY",  # tryceratops
    "S",    # flake8-bandit security checks
    "ASYNC", # flake8-async async/await rules
    "ARG",  # flake8-unused-arguments
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Rule configuration
ignore = [
    "D203",  # one-blank-line-before-class (conflicts with D211)
    "D212",  # multi-line-summary-first-line (conflicts with D213)
    "TRY003",  # long-exception-message
    "PLR0913",  # too-many-arguments
    "S101",   # Use of assert detected (acceptable in tests)
]

# Fix configuration
fixable = ["A", "B", "C", "D", "E", "F", "I", "N", "UP", "RUF", "TCH", "ERA", "S", "ARG"]
unfixable = ["PLR", "TRY", "ASYNC"]

# Task tags
task-tags = ["TODO", "FIXME", "XXX", "HACK"]
typing-modules = ["typing", "typing_extensions"]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104", "I001"]
"src/api/repositories/weaviate/**/*.py" = ["I001"]
"tests/*" = ["D100", "D101", "D102", "D103", "D104", "S101", "I001"]
"src/migrations/*" = ["D", "ERA", "RUF012", "I001"]
"src/config/*" = ["D100", "D104"]

# Plugin configurations
[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path", "fastapi.Body"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
    "pydantic.field_validator"
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
split-on-trailing-comma = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
known-third-party = [
    "aio_pika",
    "aiohttp",
    "alembic",
    "asyncpg",
    "beautifulsoup4",
    "dependency_injector",
    "fastapi",
    "httpx",
    "huggingface_hub",
    "minio",
    "opentelemetry",
    "pydantic",
    "pydantic_settings",
    "pytest",
    "redis",
    "requests",
    "sentry_sdk",
    "sqlalchemy",
    "supabase",
    "tenacity",
    "transformers",
    "uvicorn",
    "weaviate",
    "weaviate_client"
]
lines-after-imports = 2

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"