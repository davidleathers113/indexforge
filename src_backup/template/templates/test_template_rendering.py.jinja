{# Template for testing general template rendering #}
{% extends "base_template.py.jinja" %}

{%- block imports %}
{{ super() }}
from src.template.environment import create_environment
{%- endblock %}

{%- block test_class %}
class TestTemplateRendering:
    """Test general template rendering functionality."""

    def test_basic_template_rendering(self, env):
        """Test that basic templates render correctly."""
        template_str = """\
{%- from 'common/macros/mocks.py.jinja' import setup with context -%}
{%- from 'common/macros/assertions.py.jinja' import verify_result with context -%}
def test_{{ test_name }}():
    \"\"\"{{ docstring }}\"\"\"
    # Setup
    {{ setup("test_mock", return_value=expected_value) | indent(4) }}

    # Execute
    result = test_mock()

    # Verify
    {{ verify_result("result", "expected_value") | indent(4) }}"""

        context = {
            "test_name": "basic_functionality",
            "docstring": "Test basic functionality",
            "expected_value": 42,
        }

        result = env.from_string(template_str).render(**context)
        logger.debug("Generated code:\n%s", result)

        expected = """\
def test_basic_functionality():
    """Test basic functionality"""
    # Setup
    test_mock = mocker.Mock(return_value=42)

    # Execute
    result = test_mock()

    # Verify
    assert result == expected_value"""

        # Normalize newlines
        result = result.replace("\r\n", "\n")
        expected = expected.replace("\r\n", "\n")

        assert result == expected

        # Verify the code is valid Python
        try:
            compile(result, "<string>", "exec")
        except SyntaxError as e:
            pytest.fail(f"Generated code is not valid Python: {e}")

    def test_template_with_filters(self, env):
        """Test that templates with filters render correctly."""
        template_str = """\
def test_function():
    data = {
        "string_value": {{ string_value|tojson }},
        "list_value": {{ list_value|tojson }},
        "dict_value": {{ dict_value|tojson }},
    }

    processed_data = {
        "upper": {{ string_value|upper|tojson }},
        "sorted": {{ list_value|sort|list|tojson }},
        "items": {{ dict_value.items()|list|tojson }},
    }

    assert processed_data == {
        "upper": {{ string_value|upper|tojson }},
        "sorted": {{ list_value|sort|list|tojson }},
        "items": {{ dict_value.items()|list|tojson }},
    }"""

        context = {
            "string_value": "test",
            "list_value": [3, 1, 4, 1, 5],
            "dict_value": {"a": 1, "b": 2},
        }

        result = env.from_string(template_str).render(**context)
        logger.debug("Generated code:\n%s", result)

        expected = """\
def test_function():
    data = {
        "string_value": "test",
        "list_value": [3, 1, 4, 1, 5],
        "dict_value": {"a": 1, "b": 2},
    }

    processed_data = {
        "upper": "TEST",
        "sorted": [1, 1, 3, 4, 5],
        "items": [["a", 1], ["b", 2]],
    }

    assert processed_data == {
        "upper": "TEST",
        "sorted": [1, 1, 3, 4, 5],
        "items": [["a", 1], ["b", 2]],
    }"""

        # Normalize newlines
        result = result.replace("\r\n", "\n")
        expected = expected.replace("\r\n", "\n")

        assert result == expected

        # Verify the code is valid Python
        try:
            compile(result, "<string>", "exec")
        except SyntaxError as e:
            pytest.fail(f"Generated code is not valid Python: {e}")

    def test_template_with_custom_extensions(self, env):
        """Test that templates with custom extensions render correctly."""
        template_str = """\
{%- from 'common/macros/mocks.py.jinja' import setup, verify_mock_calls with context -%}
def test_function():
    # Setup test data
    data = {
        "nested": {
            "items": [
                {%- for item in items %}
                {
                    "id": {{ item.id }},
                    "name": {{ item.name|tojson }},
                    "value": {{ item.value }},
                },
                {%- endfor %}
            ],
        },
    }

    # Process with custom filters
    processed = {
        "formatted": [
            {%- for item in items %}
            format_item(
                id={{ item.id }},
                name={{ item.name|tojson }},
                value={{ item.value }}
            ),
            {%- endfor %}
        ],
        "transformed": transform_data(
            items=data["nested"]["items"],
            mode={{ mode|tojson }}
        ),
    }

    # Verify results
    for item in processed["formatted"]:
        validate_format(item)

    assert processed["transformed"] == {
        "mode": {{ mode|tojson }},
        "count": {{ items|length }},
        "total": {{ items|sum(attribute="value") }},
    }"""

        context = {
            "items": [
                {"id": 1, "name": "first", "value": 10},
                {"id": 2, "name": "second", "value": 20},
                {"id": 3, "name": "third", "value": 30},
            ],
            "mode": "test",
        }

        result = env.from_string(template_str).render(**context)
        logger.debug("Generated code:\n%s", result)

        expected = """\
def test_function():
    # Setup test data
    data = {
        "nested": {
            "items": [
                {
                    "id": 1,
                    "name": "first",
                    "value": 10,
                },
                {
                    "id": 2,
                    "name": "second",
                    "value": 20,
                },
                {
                    "id": 3,
                    "name": "third",
                    "value": 30,
                },
            ],
        },
    }

    # Process with custom filters
    processed = {
        "formatted": [
            format_item(
                id=1,
                name="first",
                value=10
            ),
            format_item(
                id=2,
                name="second",
                value=20
            ),
            format_item(
                id=3,
                name="third",
                value=30
            ),
        ],
        "transformed": transform_data(
            items=data["nested"]["items"],
            mode="test"
        ),
    }

    # Verify results
    for item in processed["formatted"]:
        validate_format(item)

    assert processed["transformed"] == {
        "mode": "test",
        "count": 3,
        "total": 60,
    }"""

        # Normalize newlines
        result = result.replace("\r\n", "\n")
        expected = expected.replace("\r\n", "\n")

        assert result == expected

        # Verify the code is valid Python
        try:
            compile(result, "<string>", "exec")
        except SyntaxError as e:
            pytest.fail(f"Generated code is not valid Python: {e}")
{%- endblock %}