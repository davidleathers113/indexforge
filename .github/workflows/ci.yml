name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
      # Add fail-fast strategy to ensure all test variations complete
      fail-fast: false

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      weaviate:
        image: semitechnologies/weaviate:1.19.6
        ports:
          - 8080:8080
        env:
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
          PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
          DEFAULT_VECTORIZER_MODULE: "none"
          CLUSTER_HOSTNAME: "node1"
        options: >-
          --health-cmd "curl -f http://localhost:8080/v1/.well-known/ready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run dependency vulnerability scan
        run: poetry run safety check

      - name: Run linters
        run: |
          poetry run ruff check src tests
          poetry run mypy src

      # Split test execution for better visibility and failure isolation
      - name: Run unit tests
        run: poetry run pytest tests/unit --cov=src --cov-report=xml
        env:
          REDIS_URL: redis://localhost:6379/0
          WEAVIATE_URL: http://localhost:8080

      - name: Run integration tests
        run: poetry run pytest tests/integration --cov=src --cov-report=xml --cov-append
        env:
          REDIS_URL: redis://localhost:6379/0
          WEAVIATE_URL: http://localhost:8080
          REDIS_POOL_SIZE: 10
          REDIS_MAX_CONNECTIONS: 50
          WEAVIATE_BATCH_SIZE: 100

      - name: Run performance tests
        run: |
          poetry run pytest tests/performance \
            --cov=src \
            --cov-report=xml \
            --cov-append \
            -v \
            --durations=10 \
            --durations-min=1.0
        env:
          REDIS_URL: redis://localhost:6379/0
          WEAVIATE_URL: http://localhost:8080
          REDIS_POOL_SIZE: 10
          REDIS_MAX_CONNECTIONS: 50
          WEAVIATE_BATCH_SIZE: 100

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

      # Archive test results and performance metrics
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            .coverage
            coverage.xml
            .pytest_cache/v/cache/nodeids
            test-results.xml
